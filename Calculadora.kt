import kotlin.math.pow
import kotlin.math.sqrt

fun main() {
    var opcion: Int // Variable para almacenar la opci√≥n del men√∫

    do {
        // Men√∫ principal de opciones
        println("\n--- CALCULADORA PROFESIONAL ---")
        println("1. Suma")
        println("2. Resta")
        println("3. Multiplicaci√≥n")
        println("4. Divisi√≥n")
        println("5. Potencia (x^y)")
        println("6. Ra√≠z cuadrada")
        println("7. M√≥dulo")
        println("8. Salir")
        print("Selecciona una opci√≥n (1-8): ")

        // Lee la opci√≥n del usuario. Si no es v√°lida, se asigna -1
        opcion = readLine()?.toIntOrNull() ?: -1

        // Estructura de decisi√≥n para ejecutar la opci√≥n elegida
        when (opcion) {
            1 -> {
                // Suma de dos n√∫meros
                val a = pedirNumero("Primer n√∫mero: ")
                val b = pedirNumero("Segundo n√∫mero: ")
                println("Resultado: ${a + b}")
            }
            2 -> {
                // Resta de dos n√∫meros
                val a = pedirNumero("Primer n√∫mero: ")
                val b = pedirNumero("Segundo n√∫mero: ")
                println("Resultado: ${a - b}")
            }
            3 -> {
                // Multiplicaci√≥n de dos n√∫meros
                val a = pedirNumero("Primer n√∫mero: ")
                val b = pedirNumero("Segundo n√∫mero: ")
                println("Resultado: ${a * b}")
            }
            4 -> {
                // Divisi√≥n de dos n√∫meros, validando que no se divida entre cero
                val a = pedirNumero("Dividendo: ")
                val b = pedirNumero("Divisor: ")
                if (b != 0.0) {
                    println("Resultado: ${a / b}")
                } else {
                    println("‚ùå No se puede dividir entre cero.")
                }
            }
            5 -> {
                // Potencia (x^y)
                val base = pedirNumero("Base: ")
                val exponente = pedirNumero("Exponente: ")
                println("Resultado: ${base.pow(exponente)}")
            }
            6 -> {
                // Ra√≠z cuadrada, validando que el n√∫mero no sea negativo
                val num = pedirNumero("N√∫mero: ")
                if (num >= 0) {
                    println("Resultado: ${sqrt(num)}")
                } else {
                    println("‚ùå No se puede calcular ra√≠z de un n√∫mero negativo.")
                }
            }
            7 -> {
                // M√≥dulo o residuo, validando que el divisor no sea cero
                val a = pedirNumero("Dividendo: ")
                val b = pedirNumero("Divisor: ")
                if (b != 0.0) {
                    println("Resultado: ${a % b}")
                } else {
                    println("‚ùå No se puede calcular m√≥dulo con cero.")
                }
            }
            8 -> println("üëã ¬°Hasta luego!") // Salida del programa
            else -> println("‚ùå Opci√≥n inv√°lida.") // Opci√≥n incorrecta
        }

    } while (opcion != 8) // El ciclo se repite mientras no se elija salir
}

// Funci√≥n para pedir un n√∫mero al usuario y validar la entrada
fun pedirNumero(mensaje: String): Double {
    while (true) {
        print(mensaje)
        val entrada = readLine()
        val numero = entrada?.toDoubleOrNull()
        if (numero != null) return numero // Si el n√∫mero es v√°lido, se devuelve
        println("‚ùå Entrada inv√°lida. Intenta de nuevo.") // Mensaje de error
    }
}
